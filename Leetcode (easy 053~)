//053 Maximum Subarray
//Dynamic programming (DP) 動態規劃
//與二元樹類似,皆以array[0]當作比較基準點,並記數,差異點為DP需來回不斷驗證,時間複雜度增加

int maxSubArray(int* nums, int numsSize) {

    int i, sum = 0, max = nums[0];

    for (i = 0; i < numsSize; i++) {
        if (sum >= 0)
            sum = sum + nums[i];
        else
            sum = nums[i];
        if (sum > max)
            max = sum;
    }
    return max;
}

//088 Merge Sorted Array
//捨去氣泡排序法

void merge(int* nums1, int nums1Size, int m, int* nums2, int nums2Size, int n){

    int i = m - 1;
    int j = n - 1;
    int length = m + n - 1;
    while (i >= 0 || j >= 0) {
        if (i >= 0 && j >= 0) {
            if (nums1[i] > nums2[j])
                nums1[length--] = nums1[i--];
            else
                nums1[length--] = nums2[j--];
        }
        else if (i >= 0)
            nums1[length--] = nums1[i--];
        else
            nums1[length--] = nums2[j--];
    }
}
