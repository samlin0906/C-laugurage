//020 Valid Parentheses
//stack, 後進先出
//需在每個迴圈加上 if (top == 0) return false, 要不然leetcode會判定runtime error; https://ithelp.ithome.com.tw/questions/10199167

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

bool isValid(char * s){
    int i, length, top = 0;
    char *stack, c;
    length = strlen(s);
    stack = (char *) malloc(length);                           //malloc(size_t, size); 另一種寫法,無須加入sizeof
    for (i = 0; i < length; ++ i) {
        if (s[i] == ')') {
            c = stack[--top];                                 //不可寫top--, 因為為stack算法,從最後一位開始算
            if (c != '(')
                return false;
        }else if (s[i] == '}') {
            c = stack[--top];
            if (c != '{')
                return false;
        }else if (s[i] == ']') {
            c = stack[--top];
            if (c != '[')
                return false;
        } else {
            stack[top++] = s[i];
        }
    }
    free(stack);
    return top == 0;                                        //意味stack = []; 輸入值如果為空的話,判定True
}


int main () {
    char str[] = {"()}"};
    if (isValid(str))
        printf("True");
    else
        printf("False.");
    return 0;
}

//026 Remove Duplicates from Sorted Array
//in-place algorithm 原地演算法
//Counting Sort 計數排序法
//為避免增加記憶體(新增array), 直接重設計數


#include <stdio.h>

int removeDuplicates(int* nums, int numsSize){

    int i, count = 1;
    if (numsSize == 0)
        return 0;
    for (i = 1; i < numsSize; i++) {
        if (nums[i] != nums[i - 1])
            nums[count++] = nums[i];
    }
    return count;
}

int main () {
    int a[] = {0,0,1,1,1,2,2,3,3,4};
    int size;
    size = sizeof(a) / sizeof(a[0]);
    printf("%d", removeDuplicates(a, size));
    return 0;
}

//035 Search Insert Position
//sorted array
//In order to find 順序查找, O(n)

int searchInsert(int* nums, int numsSize, int target){
    int i;
    for (i =0; i < numsSize; i++) {
        if (nums[i] >= target)
            return i;
    }
    return numsSize;
}

int main () {
    int a[] = {1,3,5,6};
    int size;
    size = sizeof(a) / sizeof(a[0]);
    printf("%d", searchInsert(a, size, 0));
    return 0;
}
