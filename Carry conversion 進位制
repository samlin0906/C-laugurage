//066 Plus One
//十進位制加1
//returnsize

#include <stdio.h>
#include <stdlib.h>

int* plusOne(int* digits, int digitsSize, int* returnSize) {

    int i;
    for (i = digitsSize - 1; i >= 0; i--) {
        if (digits[i] != 9) {
            digits[i]++;                                        //有非9就加1, 然後停止運算; digits[i] = digits[i] + 1
            break;
        }
        digits[i] = 0;                                         //凡是9的部分全變成0
    }
    if(digits[0] == 0) {
        int j = 0, *array;
        array = (int *) malloc(sizeof(int) *(digitsSize + 1));
        array[0] = 1;
        for (i = 1; i < digitsSize + 1; i ++) {
            array[i] = digits[j++];
        }
        *returnSize = digitsSize + 1;
        return array;
    }
    *returnSize = digitsSize;                              //不須free(), 因為malloc為local
    return digits;
}

int main () {
    int a[] = {4, 8, 9};
    int i, *array, size, resize = 0;
    size = sizeof(a) / sizeof(a[0]);
    array = plusOne(a, size, &resize);
    for (i = 0; i < resize; i++) {
        printf("%d", array[i]);
    }
    return 0;
}

//067 Add Binary
//二進位加法
//https://leetcode.jp/leetcode-67-add-binary-%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF%E5%88%86%E6%9E%90/

char * addBinary(char * a, char * b){
    
    int length_a, length_b, length, count = 0;
    length_a = strlen(a);
    length_b = strlen(b);
    length = length_a > length_b ? length_a : length_b;
    char *sum;
    sum = (char*)calloc(length + 2, sizeof(char));
    sum[length + 1] = '\0';
    length_a = length_a - 1;
    length_b = length_b - 1;
    while (length_a >= 0 || length_b >= 0) {                                  //比較 a & b的長度
        count += length_a >= 0 ? a[length_a--] - '0': 0;                     //代表ASCII code, 也可以寫- 48; ‘0’-‘0’ = 0， ‘0’+1=‘1’
        count += length_b >= 0 ? b[length_b--] - '0': 0;
        sum[length--] = count % 2 + '0';                                    //看此位置上為0還是1
        count = count / 2;                                                  //將位置推進一位
    }
    if (!count)                                                            //a =[0], b =[0], sum = [0]
        return sum + 1;
    sum[0] = '1';
    return sum;
}
