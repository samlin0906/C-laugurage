//014  Longest Common Prefix
//雙指標 二維
//深度優先遍歷 縱向遍歷圖

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

char * longestCommonPrefix(char ** strs, int strsSize){
    int i, j, index, count;                            
    if (strsSize <= 1)
        return *strs;                                   //不可寫""
    index = strlen(strs[0]);                            //strlen不包含'\0'
    char *a;
    a = (char *)malloc(sizeof(char) * (index + 1));    //(char*)是用來轉換void類型的malloc; (index + 1)是將'\0'加入,以便後續停止運作
    strcpy(a, strs[0]);                                //將strs[0]當作對照組
    for (i = 1; i < strsSize; i++) {
        count = 0;
        for (j = 0; j < index; j ++) {
            if (a[j] == strs[i][j])
                count++;
            else {                                    //不可寫else if, else 代表 false
                a[j] = '\0';
                break;
            }

        }
        if (count == 0)
            return "";
        if (count <= index)
            index = count;                        //不可寫count = index

    }
    free(a);
    return a;
}

int main () {
    char *strs[] = {"f"};
    printf("%s", longestCommonPrefix(strs, 1));
    return 0;
}

//094 Binary Tree Inorder Traversal
//Inorder Traversal 中序遍歷
//Iterative Approach

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
/**
 * Note: The returned array must be malloced, assume caller calls free().
 */

int* inorderTraversal(struct TreeNode* root, int* returnSize) {

    int *result = NULL;                                                                                   //if (root = NULL) return 0;
    *returnSize = 0;

    struct TreeNode **stack = (struct TreeNode **) malloc(sizeof(struct TreeNode *));
    struct TreeNode *pop;
    int length = 0, state = 1;

    while (length > 0 || root != NULL) {
        if (root) {                                                                                         //走訪左子樹
            stack = (struct TreeNode **) realloc(stack, sizeof(struct TreeNode *) * (length + 1));
            stack[length++] = root;                                                                         //紀錄父節點
            root = root->left;
        } else {
            root = stack[--length];                                                                        //回到父節點
            result = (int *) realloc(result, sizeof(int) * (*returnSize + 1));
            result[*returnSize] = root->val;                                                               //走訪父節點
            *returnSize += 1;
            root = root->right;                                                                            //走訪右子樹
        }
    }
    return result;
}

//100 Same Tree

#include <stdlib.h>
#include <stdbool.h>

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */

bool isSameTree(struct TreeNode* p, struct TreeNode* q){

    if (p == NULL && q == NULL)
        return true;
    else if (p == NULL || q == NULL)
        return false;
    else if (p ->val != q ->val)
        return false;

    return (isSameTree(p ->left, q ->left) && isSameTree(p ->right, q ->right));    //python: self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)

}
